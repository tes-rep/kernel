name: Compile kernel v2

on:
  workflow_dispatch:
    inputs:
      kernel_source:
        description: "Select the kernel source"
        required: false
        default: "tes-rep"
        type: choice
        options:
          - unifreq
          - codesnas
          - Dirgha80
          - Houjie80
          - tes-rep
          - tes-rep@tes
          - sib0ndt/linux-6.1.66
      kernel_version:
        description: "Select kernel version"
        required: false
        default: "6.6.y_6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.13.y
          - 6.14.y
          - 6.12.y
          - 6.1.66
          - 5.4.y_5.10.y
          - 5.15.y_6.1.y
          - 6.6.y_6.12.y
      kernel_auto:
        default: true
        type: boolean
      delete_source:
        default: true
        type: boolean
      kernel_package:
        default: "all"
        type: choice
        options: [all, dtbs]
      kernel_toolchain:
        default: "gcc"
        type: choice
        options: [clang, gcc, gcc-14.2]
      compress_format:
        default: "xz"
        type: choice
        options: [xz, gzip, zstd, lzma]
      kernel_sign:
        default: "-Hj"
        type: string
      kernel_config:
        default: "kernel-config/release/s905x4"
        type: choice
        options:
          - kernel-config/release/s905x4
          - kernel-config/release/general
          - kernel-config/release/DBAI
          - false
      kernel_mu:
        default: "s905x4"
        type: choice
        options: [s905x4, stable, dev, beta, dtb]

env:
  TZ: Asia/Jakarta

jobs:
  build:
    runs-on: ubuntu-22.04-arm
    if: ${{ github.event.repository.owner.id == github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          sudo swapoff -a
          sudo rm -rf /usr/share/dotnet /mnt/swapfile /root/.cargo ~/.rustup
          sudo -E apt-get update
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[a-zA-Z]*//g' | cut -d. -f1) - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[a-zA-Z]*//g' | cut -d. -f1) - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Create a mapped directory
        id: mapped
        working-directory: /builder
        run: |
          mkdir -p /builder/{kernel,output}
          ln -sf /builder/kernel $GITHUB_WORKSPACE/kernel
          ln -sf /builder/output $GITHUB_WORKSPACE/output
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Validate Kernel Config Path
        run: |
          if [[ "${{ inputs.kernel_config }}" != "false" && ! -d "${{ inputs.kernel_config }}" ]]; then
            echo "‚ùå ERROR: Kernel config path not found: ${{ inputs.kernel_config }}"
            exit 1
          fi

      - name: Apply Custom Patches (if any)
        run: |
          PATCH_DIR="patches/${{ inputs.kernel_version }}"
          if [ -d "$PATCH_DIR" ]; then
            echo "üì¶ Found patches in $PATCH_DIR"
            for patch in "$PATCH_DIR"/*.patch; do
              echo "‚û°Ô∏è  Applying $patch"
              patch -d /builder/kernel -p1 < "$patch" || { echo "‚ùå Failed patch: $patch"; exit 1; }
            done
          else
            echo "‚ÑπÔ∏è No patch folder for version: ${{ inputs.kernel_version }}"
          fi

      - name: Compile the kernel [${{ inputs.kernel_version }}]
        uses: Dirgha80/amlogic-s9xxx-armbian@main
        if: ${{ steps.mapped.outputs.status == 'success' && !cancelled() }}
        with:
          build_target: kernel
          kernel_source: ${{ inputs.kernel_source }}
          kernel_version: ${{ inputs.kernel_version }}
          kernel_auto: ${{ inputs.kernel_auto }}
          delete_source: ${{ inputs.delete_source }}
          kernel_package: ${{ inputs.kernel_package }}
          kernel_toolchain: ${{ inputs.kernel_toolchain }}
          kernel_sign: ${{ inputs.kernel_sign }}
          kernel_config: ${{ inputs.kernel_config }}
          compress_format: ${{ inputs.compress_format }}
          silent_log: true

      - name: Dump Kernel Config Preview
        if: always()
        run: |
          echo "===== Kernel .config ====="
          cat /builder/kernel/.config || echo "No .config file found"

      - name: Upload Build Log (build.log)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ inputs.kernel_version }}
          path: /builder/output/build.log

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS == 'success' && !cancelled() }}
        with:
          tag: kernel_${{ inputs.kernel_mu }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            - Kernel built from: `${{ inputs.kernel_source }}`
            - Version: `${{ inputs.kernel_version }}`
            - Toolchain: `${{ inputs.kernel_toolchain }}`
            - Config: `${{ inputs.kernel_config }}`
            - Signature: `${{ inputs.kernel_sign }}`
            - This is a `${{ inputs.kernel_mu }}` kernel build

      - name: Cleanup Loop Devices and Mounts
        if: always()
        run: |
          sudo umount /builder || true
          sudo vgremove -f github || true
          sudo losetup -D || true
