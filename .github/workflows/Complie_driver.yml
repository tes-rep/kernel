name: Build Armbian Driver

on:
  workflow_dispatch:
    inputs:
      driver_url:
        description: 'ZIP GitHub (optional, rtl8189ES_linux)'
        required: false
      header_url:
        description: 'URL ke kernel header Armbian (.tar.gz)'
        required: true
      release_tag:
        description: 'Tag GitHub Release (misal: v1.0)'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Workspace
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y curl unzip make bc

    - name: Download ARM64 Toolchain (gcc 14.2)
      run: |
        mkdir -p /opt/toolchain
        cd /opt/toolchain
        curl -LO https://github.com/ophub/kernel/releases/download/dev/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
        tar -xf arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
        echo "/opt/toolchain/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu/bin" >> $GITHUB_PATH

    - name: Download Kernel Header
      run: |
        mkdir -p kernel-header
        curl -L "${{ inputs.header_url }}" | tar -xz -C kernel-header

    - name: Download Driver (optional)
      if: ${{ inputs.driver_url != '' }}
      run: |
        mkdir -p driver
        curl -L "${{ inputs.driver_url }}" -o driver.zip
        unzip driver.zip -d driver/
        mv driver/rtl8189ES_linux-rtl8189fs driver/rtl8189fs

    - name: Inject Makefile (if not exist)
      run: |
        cat <<EOF > driver/Makefile
        obj-m += 8189fs.o
        KDIR := \$(PWD)/../kernel-header/build
        PWD := \$(shell pwd)

        all:
        	\$(MAKE) -C \$(KDIR) M=\$(PWD) ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- modules

        clean:
        	\$(MAKE) -C \$(KDIR) M=\$(PWD) clean
        EOF

    - name: Build Driver
      run: |
        cd driver
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-none-linux-gnu-
        make

    - name: Archive .ko Output
      run: |
        mkdir -p output
        find driver -name '*.ko' -exec cp {} output/ \;
        cd output
        tar -czf driver-output.tar.gz *.ko

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.release_tag }}
        files: output/driver-output.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
