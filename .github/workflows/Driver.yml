name: Build Kernel Driver and Release6

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'Repo Git source kernel'
        required: true
      driver_url:
        description: 'Driver ZIP/Git archive (opsional)'
        required: false
      kernel_branch:
        description: 'Branch Kernel (default=master)'
        default: 'master'
        required: false
      release_tag:
        description: 'Tag Release (misal: v1.0)'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Workspace
      uses: actions/checkout@v4

    - name: Install ARM64 Toolchain
      run: |
        sudo apt update
        sudo apt install -y gcc-aarch64-linux-gnu make bc unzip curl

    - name: Clone Kernel Source
      run: |
        git clone --depth 1 --branch "${{ inputs.kernel_branch }}" "${{ inputs.repo_url }}" kernel

    - name: Clone Kernel Config
      run: |
        rm -rf kernel-config
        git clone https://github.com/tes-rep/kernel kernel-config

    - name: Download Driver (Opsional)
      if: ${{ inputs.driver_url != '' }}
      run: |
        mkdir -p driver
        curl -L "${{ inputs.driver_url }}" -o driver.zip
        unzip driver.zip -d driver/
        mv rtl8189ES_linux rtl8189fs
    - name: Inject Minimal Makefile
      run: |
       cat <<'EOF' > driver/Makefile
       obj-m += rtl8189fs/
       KDIR ?= /lib/modules/$(shell uname -r)/build
       PWD := \$(shell pwd)
       all:
       	\$(MAKE) -C \$(KDIR) M=\$(PWD) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules
       clean:
       	\$(MAKE) -C \$(KDIR) M=\$(PWD) clean
       EOF

    - name: Setup Kernel Config
      run: |
        cp kernel-config/kernel-config/release/s905x4/config-6.12 kernel/.config
        cd kernel
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_prepare

    - name: Build Kernel Module
      run: |
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        cd kernel
        make M=../driver modules

    - name: Archive Output
      run: |
        mkdir -p output
        find driver -name '*.ko' -exec cp {} output/ \;
        cd output
        tar -czf driver-output.tar.gz *.ko || echo "Build failed or no .ko found"

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.release_tag }}
        files: output/driver-output.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
