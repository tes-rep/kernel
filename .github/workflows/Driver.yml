name: Build ARM64 Driver and Release

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'Repo Git source kernel (ARM64)'
        required: true
      kernel_branch:
        description: 'Branch Kernel (default=main)'
        default: 'main'
        required: false
      config_path:
        description: 'Path ke file .config (misal: config-6.12)'
        required: true
      driver_url:
        description: 'URL ZIP/Git driver source'
        required: true
      driver_folder:
        description: 'Nama folder setelah unzip/clone (misal: rtl8189fs)'
        required: true
      release_tag:
        description: 'Tag Release (misal: v1.0)'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Workspace
      uses: actions/checkout@v4

    - name: Install ARM64 Toolchain & Utils
      run: |
        sudo apt update
        sudo apt install -y gcc-aarch64-linux-gnu make bc unzip curl tar

    - name: Clone Kernel Source
      run: |
        git clone --depth 1 --branch "${{ inputs.kernel_branch }}" "${{ inputs.repo_url }}" kernel

    - name: Apply Kernel Config
      run: |
        cp "${{ inputs.config_path }}" kernel/.config
        cd kernel
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_prepare

    - name: Download and Extract Driver
      run: |
        mkdir -p driver
        curl -L "${{ inputs.driver_url }}" -o driver.zip
        unzip driver.zip -d driver/
        mv driver/* "${{ inputs.driver_folder }}"

    - name: Create Minimal Makefile
      run: |
        cat <<EOF > driver/Makefile
        obj-m += ${{ inputs.driver_folder }}/
        KDIR := \$(PWD)/kernel
        PWD := \$(PWD)
        all:
        	\$(MAKE) -C \$(KDIR) M=\$(PWD) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules
        clean:
        	\$(MAKE) -C \$(KDIR) M=\$(PWD) clean
        EOF

    - name: Build Driver
      run: |
        cd driver
        make

    - name: Archive .ko Output
      run: |
        mkdir -p output
        find driver -name '*.ko' -exec cp {} output/ \;
        cd output
        tar -czf driver-output.tar.gz *.ko

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.release_tag }}
        files: output/driver-output.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
